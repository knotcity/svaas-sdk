image: "node:iron-alpine"

stages:
  - test
  - build
  - deploy
  - sync

lint:
  stage: test
  except:
    - schedules
  before_script:
    - npm ci
  script:
    - npm run lint

build:
  stage: build
  except:
    - schedules
  before_script:
    - npm install
  script:
    - npm run build
  artifacts:
    paths:
      - dist/

.deploy-base:
  stage: deploy
  except:
    - schedules
  before_script:
    - apk update && apk add --no-cache jq

deploy-internal:
  extends: .deploy-base
  only:
    - pre_prod
  script:
    - echo "@knotcity:registry=https://$KNOT_REPO" > .npmrc
    - echo "//$KNOT_REPO/:_authToken=$KNOT_NPM_TOKEN" >> .npmrc
    - |
      PKG_NAME=`cat package.json | jq -r '.name'`
      LOCAL_VERSION=`cat package.json | jq -r '.version'`
      REMOTE_VERSION=`npm view $PKG_NAME version --registry https://$KNOT_REPO`
      if [ $LOCAL_VERSION != $REMOTE_VERSION ]; then
        echo "Publishing version $LOCAL_VERSION over $REMOTE_VERSION"
        npm publish
      else
        echo "Version already published, skipping"
      fi

deploy:
  extends: .deploy-base
  only:
    - master
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPMJS_TOKEN" > .npmrc
    - |
      PKG_NAME=`cat package.json | jq -r '.name'`
      LOCAL_VERSION=`cat package.json | jq -r '.version'`
      REMOTE_VERSION=`npm view $PKG_NAME version --registry https://registry.npmjs.org`
      if [ "$LOCAL_VERSION" != "$REMOTE_VERSION" ]; then
        echo "Publishing version $LOCAL_VERSION over $REMOTE_VERSION"
        npm publish --access public
      else
        echo "Version already published, skipping"
      fi

.setup-ssh-keys:
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add --no-cache openssh-client ca-certificates bash git )'
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work without extra base64 encoding.
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Set known host
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    ## Configure git
    - git config --global user.email "$KNOT_EMAIL"

push-on-github:
  extends: .setup-ssh-keys
  stage: sync
  except:
    - schedules
  only:
    - master
  script:
    - git checkout -B master "$CI_COMMIT_SHA"
    - git config --global user.name "knotcitybot"
    - if ! git config remote.github.url > /dev/null; then git remote add github "$GITHUB_REMOTE"; fi
    - git fetch --all
    - git push github master

pull-from-github:
  extends: .setup-ssh-keys
  stage: sync
  only:
    - schedules
  script:
    - git config --global user.name "knotcitybot"
    - git remote set-url origin $KNOT_SSH_REPO_URL
    - if ! git config remote.github.url > /dev/null; then git remote add github "$GITHUB_REMOTE"; fi
    - git pull github community
    - git checkout -B community github/community
    - git config --global user.name "Knobot"
    - git push origin community
